---
name: Классы
theory: |

instructions: |

  ООП отдельная большая тема в руби с миллионом своих особенностей. Сейчас мы еще не готовы ее рассматривать плотно, но как минимум нужно знать некоторые базовые конструкции, которые используются широко. В первую очередь речь про классы. Посмотрите на создание даты в руби:

  ```ruby
  # Именование классов в руби соответствует стилю CamelCase,
  # что отличает их от функций/методов и переменных

  # Создается сегодняшний день
  time = Time.new
  time.thursday? # false
  ```

  Time это класс. А сама запись означает: вызвать метод `new()` у класса. `new` в руби не отдельный оператор, а обычный метод. Конечно не совсем обычный, но синтаксически он ничем не отличается от обычных методов. Такой синтаксис появился не просто так, ниже вы поймете почему. При этом он позволяет проще делать цепочки "по месту": `Time.new.to_i`.

  Как мы помним, конструктор принадлежит не объектам, а самому классу, поэтому он вызывается на классе. Но раз это метод, то что же такое класс? Посмотрите еще один пример:

  ```ruby
  # now, а не new
  time = Time.now
  ```

  Здесь, в зависимости от вашего бекграунда, ответы могут разница. Кто-то из PHP скажет, что `now` это статический метод, кто-то скажет что может быть классов нет, а есть только объекты как в JavaScript. В руби нет статических свойств и методов и есть реальные классы. Но классы это объекты у которых есть свои методы и ... классы.

  ```ruby
  Time.utc # возвращает объект времени в utc
  Time.parse '11-11-1111' # парсит строку и возвращает объект времени
  Time.methods.count # 126

  Time.class # класс Time это Class
  Time.class.class # а у класса Class класс это Class :D
  Time.superclass # а у класса есть и родитель Object
  Time.superclass.class # у которого класс это Class
  Time.superclass.superclass # а родитель родителя это BasicObject
  # и это мы еще не говорим про классы объектов
  # А еще можно создать класс
  Class.new ... # так как класс это не только объект, но и класс
  ```

  То есть фразу в руби все есть объект надо понимать практически буквально, но это сильно отличается от того же JavaScript, где под объектом понимается конкретный тип данных. Объектная модель руби наиболее близка языку SmallTalk. С первого взгляда она пугает, но со временем к ней не просто привыкаешь, она становится интуитивной.

  Что с этим совсем делать? Пока ничего. Знание того как работать с классами и как их конструировать понадобится при взаимодействии с фреймворками и библиотеками. Эта тема рассматривается в самом конце курса, а пока небольшой пример из Rails:

  ```ruby
  # Просто демонстрация на подумать, понимать этот код не нужно
  class User < ApplicationRecord
    validates :email, presence: true, uniqueness: true

    has_many :companies
    belongs_to :company

    def to_s
      "#{first_name} #{last_name}"
    end
  end
  ```

tips:
  - Классы в руби загружаются автоматически через загрузчик. Их не подключают явно как в JavaScript.
