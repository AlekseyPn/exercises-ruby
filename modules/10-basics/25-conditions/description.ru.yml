---

name: Условные конструкции
theory: |

  Ифы в руби мало чем отличаются от ифов в любом другом языке. Поэтому здесь не будет больших сюрпризов:

  ```ruby
  def sentence_type(text)
    # проверяем последний символ в строке
    if text.end_with?('?')
      'question' # снова нет return
    elsif text.end_with?('!')
      'exclamation' # и тут
    else
      'statement' # и тут
    end
  end

  sentence_type 'anybody here?' # question
  sentence_type 'Hexlet for humans' # statement
  sentence_type 'boo!' # exclamation
  ```

  В руби ифам не нужны скобки. Выражения пишутся сразу после ключевого слова `if`. Для дополнительных условий используется ключевое словое `elsif`. И для всего остального привычный `else`.

  Здесь мы уже работаем не с числами, а строками. Одна из сильных сторон руби – [стандартная библиотека](https://ruby-doc.org/). Она решает практически все возникающие задачи. В одних только строках 185 встроенных методов!

  *Это одна из причин, почему руби чаще других выигрывает в [CodeBattle](https://codebattle.hexlet.io/)*

  ```ruby
  ''.methods.count # 185
  1.methods.count # 145
  ```

  В примере используется предикат (функция возвращающая `true` или `false`) `end_with?()`. Ключевое отличие руби от других популярных языков в использовании знака вопроса на конце, вместо `is` и его аналогов в начале. Этот подход перекочевал из Lisp языков.

  Пример выше можно переписать с помощью *case*, это аналог *switch* в других языках:

  ```ruby
  def sentence_type(text)
   # извлекаем последний символ из строки
    last_char = text[-1]
    case last_char
    when '?'
      'question' # снова нет return
    when '!'
      'exclamation' # и тут
    else
      'statement' # и тут
    end
  end
  ```

  *Case* задает условие, а *when* конкретное значение с которым идет сопоставление. Действие по умолчанию происходит в ветке *else*. Как и в других языках его можно опустить если такого действия нет. И, как обычно в руби, скобки не нужны.

instructions: |

tips: []
