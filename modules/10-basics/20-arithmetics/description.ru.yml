---
name: Арифметика
theory: |
  В Ruby есть несколько способов выразить число:

  * `-13`, `5`, `120_000` — целые числа
  * `0xFF69B4`, `0xdd` — целые шестнадцатеричные числа
  * `12.5`, `0.3`, `1_100.3`, `10e5` — десятичные числа
  * `2 + 3i`, `5i + 2` — комплексные числа

  В этом уроке мы поговорим о том, как работать с числами в Ruby.

  В Ruby есть операторы для умножения, деления, сложения и вычитания:

  * `*` — умножение. `2 * 5 = 10`
  * `/` — деление. `10 / 2 = 5`
  * `+` — сложение. `2 + 6 = 8`
  * `-` — вычитание. `1 - 3 = -2`

  Сначала выполняется умножение и деление, а потом сложение и вычитание. Скобки группируют вычисления — `100 / (10 + 3)` и `100 / 10 + 3` дадут разный ответ.

  Есть ещё пара интересных операторов:

  * `%` даст остаток от деления. `10 % 3 = 1`
  * `**` — возведение в степень. `5**2 = 25`.

  Если приходится делать много однотипных вычислений с какими-то параметрами, их можно обобщить в функции. Параметры описываются в скобках сразу после имени функции. Если нужно несколько параметров, их разделяют запятой.

  ```ruby
  def energy_from_mass(m)
    puts m * 300_000_000**2
  end

  energy_from_mass(1)  # => выведет «90_000_000_000_000_000»
  ```

instructions: |
  1. Напишите функцию `sum_of_squares`, которая принимает 3 аргумента и выводит на экран сумму их квадратов.
  2. Вычислите сумму квадратов для следующих чисел:
    * `3, 4, 5`
    * `0, 2, 3`
    * `-5, 10, 4`

tips:
  - Если делить целые числа, то ответ тоже будет целым числом. Поэтому `5 / 3` = `1`

definitions:
  - name: Комментарий
    description: |
      Текст в коде программы, который не влияет на функциональность и добавляется программистами для себя и своих коллег.
