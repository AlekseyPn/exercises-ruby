---

name: Блоки
theory: |

  Блоки в руби очень важная концепция, которая встречается на каждом шагу. У нее нет аналогов в популярных языках, поэтому при изучении блоков сложно опираться на прошлый опыт. К счастью, их не так сложно понять особенно если у вас есть опыт работы с лямбда-функциями (анонимными функциями). Начнем с примера:

  ```ruby
  # Переводится как "пять раз". В этом весь руби.
  5.times do |i|
    puts i
  end
  # 0
  # 1
  # 2
  # 3
  # 4
  ```

  Всего три строчки, но очень много новых смыслов. Если говорить в общем, то здесь вызывается метод `times()`, который принимает на вход блок кода и вызывает его 5 раз.

  Блок кода это конструкция *do end*. Блок очень похож на функцию, которая передается в функцию `times()`. Но передается довольно необычным способом. Ключевое слово *do* начинается после того как закрыты вызывающие скобки у метода. Блок просто отделяется пробелом от вызова самой функции.

  ```ruby
  # После пятерки нет запятой!
  5.times() do |i|
    puts i
  end
  ```

  Как это работает? Блоки в руби, обычно, передаются в функции как особый последний аргумент, который идет вне вызова функции. Это довольно необычная концепция. Сама по себе она не привносит никаких новых возможностей в язык, но дает новые визуальные возможности по оформлению кода. Именно из-за этой особенности руби так хорошо подходит и часто используется как язык для построения DSL (языков предметной области). Подробнее об этом в следующих уроках.

  И наконец сам блок. Можно представить, что внутри функции он попадает в переменную, которая вызывается как обычная функция. Сам блок, как функция (а он является в том числе функцией) умеет принимать параметры. Внутрь блока они попадают через конструкцию `|i|` идущую сразу после *do*. Этот синтаксис пришел в руби из Smalltalk. Если параметров несколько, то они просто перечисляются через запятую `|one, two|`.

  У блоков есть альтернативный синтаксис. Пример выше можно было записать так:

  ```ruby
  5.times { |i| puts i }
  ```

  Подобную запись используют в том случае, когда содержимое блока помещается на одну строку. Синтаксис *do/end* никогда не используют для однострочных блоков.

  Если быть до конца честными, то эти два синтаксиса работают немного по разному. У `{}` приоритет выше чем у `do/end`. Это важно, когда идет вложенный вызов нескольких функций и каждая из них умеет работать с блоками:

  ```ruby
   # в обоих примерах функции f1 и f2 вызываются
   # Подставьте в них мысленно скобки

   # здесь блок будет относиться к функции f1
   f1 f2 do # f1(f2() do ... end)
   end

   # здесь блок будет относиться к функции f2
   f1 f2 {} # f1(f2()) {}
  ```

  Не переживайте если прямо сейчас блоки вам не понятны. Для их осознания нужно время и практика. В руби они повсеместно, поэтому понимания работы с блоками приходит быстро. Буквально в следующем модуле они будут уже везде.

instructions: |

  Выведите на экран числа от 5 до 0

tips: []
