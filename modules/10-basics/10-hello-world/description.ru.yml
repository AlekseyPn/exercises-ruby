---
name: Привет, Мир!
theory: |
  Начнём с основ: вывода информации в консоль и создания своих функций (методов).

  В Ruby это делается методом `puts`

  ```ruby
  puts "Hello, World!"
  ```

  Чтобы создать новый метод, нужно написать ключевое слово `def` и имя метода. Например, метод `say_wow` будет выглядеть так:

  ```ruby
  def say_wow
    puts "Wow"
  end
  ```

  Аргументы метода перечисляются сразу после его имени — через запятую.

  ```ruby
  def plus(foo, bar, quux)
    foo + bar + quux
  end

  plus(2, 3, 4) # => 9
  ```

  Особенность Ruby — при работе с методами не обязательно использовать скобки, программа запустится и без них. Поэтому, код сверху можно переписать без них:

  ```ruby
  def plus foo, bar, quux
    foo + bar + quux
  end

  plus 2, 3, 4 # => 9
  ```

instructions: |
  Создайте метод `puts_inverted`, который принимает два аргумента и выводит их в обратном порядке.
  Проверьте его вызвав с аргументами `"You must have"` и `"Patience"`

  ```ruby
  puts_inverted "You must have", "Patience"
  ```

  Внимание: если вы напишете `heLLo, woRld!` вместо `Hello, World!`, то это будет считаться другим текстом, потому что заглавные и строчные буквы — это разные символы. Размер буквы называют *регистром*, и говорят: **регистр — важен!** Это касается почти всего в коде, поэтому привыкайте всегда обращать внимание на регистр.

tips: []
