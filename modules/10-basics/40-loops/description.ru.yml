---
name: Циклы
theory: |
  Обход коллекции и Ruby решается не через циклы `for` и `while`, а через итераторы.

  К примеру, обход чисел от 0 по 4 проводится не так:

  ```ruby
  for i in 0..4
    puts i
  end
  ```

  А через метод `each`:

  ```ruby
  (0..4).each do |i|
    puts i
  end
  ```

  Распишем, что происходит в коде выше. `(0..4)` создаёт диапазон чисел — от 0 по 4. У диапазона есть метод `each` — применяет к каждому элементу диапазона переданную функцию.

  Результат выполнения кода выше:

  ```
  0
  1
  2
  3
  4
  ```

  Особенность `each` — он не создаёт новой коллекции и возвращает то, что было на входе. Если хочется сформировать новые данные, можно использовать `map`. К примеру, так выглядит код для получения квадратов чисел от 1 до 10:

  ```ruby
  (1..10).map do |i|
    i**2
  end # => [1, 4, 9, 25, 36, 49, 64, 81, 100]
  ```

instructions: |
  Программист-фрилансер долго работал над проектом и каждый день логгировал
  рабочие часы. Зарплата фрилансера — `salary` евро в час. Бухгалтер хочет
  знать, сколько рублей должны фрилансеру, если курс евро — `exchange_rate`
  рублей за евро.

  Нужно написать функцию `total_salary`, которая принимает 3 аргумента:

  * Массив — каждый элемент показывает, сколько в этот день он отработал
  * Часовой оклад в евро
  * Курс рубля к евро

  ```ruby
  # 7 EUR/h, 6 hrs, 60 RUB / EUR
  total_salary([1, 2, 3], 7, 60) # => 2520
  ```

definitions: []

tips: []
