---

name: Примитивные типы данных
theory: |

  Большая часть типов данных в руби работает аналогично типам в других языках, это относится к строкам, числам или булевым значениям:

  ```ruby
  'one' # String
  true # Boolean
  false
  3 # Integer
  5.2 # Float
  ```

  Вместо `null` в руби используется `nil`. Такое название традиционно используется в Smalltalk и семействе Lisp языков для обозначения концепции "ничего". В остальном все очень похоже.

  Кроме стандартных типов, руби добавляет довольно необычный тип называемый символом. Подобный тип есть во многих языках включая erlang (атом), clojure (кейворд) и javascript (символ). Пример:

  ```ruby
  :key
  :anotherone
  ```

  Символ очень похож на строку, но в отличии от строки, представлен в памяти в единственном экземпляре, в отличии от строк, которые создаются каждый раз заново. Это если говорить про техническую сторону. На практике символ удобен там, где строка выражает саму себя. Обычно там где в других языках создают константы в которые записаны строки с именем этой константы, в руби просто используют символ. По большому счету, символ не является чем-то жизненно необходимым, он немного сокращает количество кода и местами чуть удобнее в использовании. В остальном, по смыслу, та же строка.

  Символы это такая концепция, которая "заходит" исключительно на практике. Чем больше примеров будет перед глазами, тем быстрее получится использовать этот тип по назначению.

  Все данные в руби это объекты, или как говорят, инстансы классов. Для каждого типа у руби свой класс. `nil` например представлен классом `NilClass` и является единственным его объектом. `true` объект класса `TrueClass`, а `false` объект класса `FalseClass`.

  Узнать класс любого объекта можно так:

  ```ruby
  1.class # Integer
  ''.class String
  nil.class NilClass
  ```

  С другой стороны классы в руби тоже объекты, у которых есть свои классы 0_o. Но это уже совсем другая история) Есть даже такая шутка (но это не шутка): в руби объект это класс, а класс это объект. Почему это так – узнаем чуть позже.

instructions: |

tips: []
