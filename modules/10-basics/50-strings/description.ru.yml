---
name: Строки
theory: |
  Работа со строками — одна из сильных сторон Ruby. В этом уроке мы опишем разные

  Если хочется объединить строки — есть оператор конкатенации `+`. `"foo" + "bar" == "foobar"`.

  Строки в двойных кавычках поддерживают интерполяцию — можно написать имя переменной внутри `#{}` и она приведётся к строке.

  ```ruby
  age = 30

  "Hello, I am #{age} years old" # => "Hello, I am 30 years old"
  'Hello, I am #{age} years old' # => "Hello, I am #{age} years old"
  ```

  Также можно получить любой символ строки через `[]` — можно даже получить подстроку, если указать диапазон (`[1..2]`). Отрицательные символы — отсчёт от конца строки.

  ```ruby
  "Любовь"[0] # => "Л"
  "Любовь"[-1] # => "ь"
  "Любовь"[1..2] # => "юб"
  "Любовь"[0..-1] # => "Любовь"
  "Любовь"[2..-2] # => "бов"
  "Любовь"[-4..-2] # => "бов"
  ```

instructions: |
  Как только бригада электриков выезжает к клиенту, они высылают СМС

  > К вам выехали по заказу ***123. Приедем через 15 мин. Бригадир Иванов С.

  Задача — написать метод `build_sms_message`, который принимает 3 аргумента и возвращает текст СМС.

  * Имя бригадира
  * Фамилию бригадира
  * Время до прибытия
  * Строка с шестизначным номером заказа

  Обратите внимание, что для экономии денег вместо имени бригадира мы пишем только первую букву имени.

tips:
  - Конкатенация работает только со строками — сделать `"foo=" + 3` нельзя. Если очень хочется, можно использовать интерполяцию — она приведёт любой объект к строке.
    `"foo=#{3}"`

definitions: []
