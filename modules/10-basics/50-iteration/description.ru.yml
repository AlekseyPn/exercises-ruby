---
name: Итерация
theory: |

  В руби есть циклы, но ими не пользуются. Если и пользуются, то скорее всего по не знанию того, как правильно работать в руби. Руби язык, в котором рулят итераторы и функции высшего порядка. Посмотрите на пример:

  ```ruby
  1.upto(5) do |i|
    puts i
  end
  # 1
  # 2
  # 3
  # 4
  # 5
  ```

  Всего три строчки, но очень много новых смыслов. Если говорить в общем, то здесь вызывается метод `upto()`, который принимает на вход блок кода и вызывает его 5 раз. Разберем этот пример.

  Метод `upto()` определен у чисел. Он "поднимается" от числа на котором вызван, то числа переданного в параметры и выполняет переданный ему блок кода нужное число раз.

  Блок кода это конструкция *do end*. Грубо говоря это анонимная функция, которая передается в функцию `upto()`. Но передается довольно необычным способом. Посмотрите на пример внимательно. Ключевое слово *do* начинается после того как закрыты вызывающие скобки у метода. Блок просто отделяется пробелом от вызова самой функции.

  Как это работает? Блоки в руби (более глубоко поговорим о них позже) могут передаваться в функции и как обычные аргументы и как особый последний аргумент, который идет вне аргументов. Это довольно необычная концепция. Сама по себе она не привносит никаких новых возможностей в язык, но дает новые визуальные возможности по оформлению кода. Именно из-за этой особенности руби так хорошо подходит и часто используется как язык для построения DSL (языков предметной области). Подробнее об этом в следующих уроках. Если опустить скобки вокруг вызоыва метода, то синтаксис будет таким:

  ```ruby
  # После пятерки нет запятой!
  1.upto 5 do |i|
    puts i
  end
  ```

  И наконец сам блок. Внутри функции он попадает в переменную, которая вызывается как обычная функция. А в функции можно передавать аргументы. Внутрь блока они попадают через конструкцию `|i|` идущую сразу после *do*. Этот синтаксис пришел в руби из Smalltalk. Если параметров несколько, то они просто перечисляются через запятую `|one, two|`.

  Не переживайте если прямо сейчас блоки вам не понятны. Для их осознания нужно время и практика. В руби они повсеместно, поэтому понимания работы с блоками приходит быстро. Буквально в следующем модуле они будут уже везде.

  Помимо блоков в руби присутствуют и настоящие лямбда-функции, уже более привычные для большинства разработчиков. Но тут есть определенная путанница из-за блоков и множества разных синтаксисов работы и с лямбдам и блоками. Таково наследие языка. Впрочем это не большая проблема при использовании [rubocop](https://github.com/rubocop-hq/rubocop).


instructions: |

  Задание

tips: []
