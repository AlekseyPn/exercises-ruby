---
name: Строки
theory: |

  Базовые операции со строками в любом языке – это интерполяция и конкатенация. Как это делается на руби:

  ```ruby
  # Конкатенация
  name = 'H' + 'e' + 'l' + 'e' + 't' # Hexlet
  # Интерполяция
  greeting = "hello #{name}" # hello Hexlet
  ```

  Интерполяция выполняется только в строках с двойными кавычками. Строки состоящие из одиночных кавычек воспринимаются "как есть" по аналогии с PHP.

  ```ruby
  line_feed = "one line\nanotherone"
  # one line
  # another one
  ```

  Помимо стандартных конкатенации и интерполяции, строки в руби усилены срезами и большим числом полезных методов. Вот лишь некоторые примеры:

  ```ruby
  name = 'ruby'
  name.upcase # 'RUBY'
  ''.empty? # true
  name.include? 'ru' # true
  name.capitalize # Ruby
  ```

  Одна из самых классных возможсностей у строк – слайсы. С их помощью можно находить любую подстроку в строке. Слайс тоже метод, но с дополнительным синтаксисом из квадратных скобок:

  ```ruby
  name = ''
  name[1] # u
  name[-1] # y
  name[0, 2] # ru
  # тут используется range, который мы изучим позже
  name[0..-2] # rub
  # и даже регулярные выражения!
  name[/ru/] # ru
  ```

  Руби один из немногих языков где строки изменяемые. Это наследие языка, которым не стоит пользоваться, но знать про это нужно. На каждый обычный метод, который возвращает новую строку, в руби есть метод с восклицательным знаком, который изменяет строку:

  ```ruby
  name = 'hexlet'
  name.capitalize # возвращает Hexlet
  puts name # => hexlet
  name.capitalize! # изменяет!
  puts name # => Hexlet
  ```

instructions: |

tips:
  - |
    [Документация по строкам](https://ruby-doc.org/core-2.7.2/String.html)
